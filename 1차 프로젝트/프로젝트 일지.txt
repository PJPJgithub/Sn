[PT 준비]
확장성 : 기사 핵심 내용 요약(AI), 폰으로 공유(기사 URL, 좋아요 표시한 기사 목록_나중에 읽기),
UI : 신문지 컨셉, 신문 질감과 색상의 배경, FONT, 클래식한 아이콘

[Coroutine Flow]
코루틴 플로우(Coroutine Flow)는 비동기 데이터 스트림을 처리하는 방법입니다. 쉽게 말해, 데이터가 준비될 때마다 순차적으로 처리할 수 있게 해주는 도구입니다. 예를 들어, 물이 흐르는 파이프를 생각해보세요. 물이 한 방울씩 흐를 때마다 그 물을 받아서 처리하는 것과 비슷합니다.

코루틴 플로우의 장점
비동기 처리: 데이터를 기다리는 동안 다른 작업을 할 수 있어, 프로그램이 멈추지 않고 계속 작동합니다.
순차적 처리: 데이터가 준비될 때마다 순서대로 처리할 수 있어, 복잡한 비동기 작업을 더 쉽게 관리할 수 있습니다.
효율성: 필요한 데이터만 처리하므로, 메모리와 CPU 사용을 최적화할 수 있습니다.

API 호출에 코루틴 플로우 사용의 장점
비동기 API 호출: API를 호출하는 동안 다른 작업을 할 수 있어, 사용자 경험이 향상됩니다. 예를 들어, 뉴스 데이터를 가져오는 동안 앱이 멈추지 않고 다른 작업을 계속할 수 있습니다.
에러 처리 용이: 데이터 스트림에서 발생하는 에러를 쉽게 처리할 수 있어, 안정적인 코드 작성이 가능합니다.
코드 간결화: 복잡한 비동기 로직을 간단하게 작성할 수 있어, 코드가 더 읽기 쉽고 유지보수가 쉬워집니다.

전체 흐름 요약
1.사용자가 NewsApiGateway.getNews 메서드를 호출합니다.
2.NewsApiGatewayImpl 클래스에서 getNews 메서드를 구현하여 newsApiService.getNews를 호출합니다.
3.NewsApiService 인터페이스에서 Retrofit을 사용하여 실제 API 요청을 보냅니다.
4.NewsApiModule 클래스에서 Retrofit 인스턴스와 NewsApiService를 제공합니다.


[Retrofit]
Retrofit을 사용하면 서버와의 통신을 간단하고 효율적으로 처리할 수 있습니다.

Retrofit의 주요 특징
간단한 API 호출: Retrofit은 API 호출을 간단한 메서드 호출로 추상화하여, 코드가 더 읽기 쉽고 유지보수하기 쉬워집니다.
JSON 변환: Gson이나 Moshi와 같은 JSON 변환 라이브러리와 함께 사용하여, JSON 데이터를 쉽게 객체로 변환할 수 있습니다.
비동기 처리: 코루틴이나 RxJava와 함께 사용하여 비동기 API 호출을 쉽게 처리할 수 있습니다.
유연성: 다양한 HTTP 메서드(GET, POST, PUT, DELETE 등)를 지원하며, URL 매개변수, 쿼리 매개변수 등을 쉽게 설정할 수 있습니다.
Retrofit을 사용하는 이유
코드 간결화: Retrofit을 사용하면 API 호출을 위한 코드를 간결하게 작성할 수 있어, 코드의 가독성과 유지보수성이 향상됩니다.
비동기 처리: 코루틴이나 RxJava와 함께 사용하여 비동기 API 호출을 쉽게 처리할 수 있어, 사용자 경험이 향상됩니다.
자동 변환: JSON 데이터를 자동으로 객체로 변환해주므로, 데이터 파싱 작업이 간편해집니다.
확장성: 다양한 기능을 플러그인 형태로 추가할 수 있어, 필요에 따라 기능을 확장할 수 있습니다.

[Usecase]
ViewModel에서 UseCase를 사용하는 이유
ViewModel에서 UseCase를 사용하는 이유는 비즈니스 로직과 UI 로직을 분리하여 코드의 유지보수성과 재사용성을 높이기 위해서입니다. UseCase는 특정 기능을 수행하는 하나의 작업 단위로, ViewModel은 이를 호출하여 필요한 작업을 수행합니다.

UseCase 사용의 장점
단일 책임 원칙: UseCase는 하나의 작업만 수행하므로, 코드가 더 명확하고 이해하기 쉬워집니다.
재사용성: 동일한 UseCase를 여러 ViewModel에서 재사용할 수 있어, 코드 중복을 줄일 수 있습니다.
테스트 용이성: UseCase는 독립적인 단위 테스트가 가능하여, 비즈니스 로직을 쉽게 테스트할 수 있습니다.
유지보수성: 비즈니스 로직이 ViewModel에서 분리되어 있어, 변경 사항이 있을 때 더 쉽게 수정할 수 있습니다.

2/10
[기능]
오류 수정

[UI 추가]

1.음성인식 되고 있다는 상태 보여주는 VIEW_완
 - 내가 말한 거 텍스트로 보여줌_observetext 살리기
 - 투명도 or 위치 or 인식할때만 뜨고 인식 다 하면 사라지기
 - 위치 조절

2.음성인식 가능 상태라는 것을 보여줌_완
- 음성인식 가능 상태에 마이크 색깔 채우기

3.음성인식 에러 알려줌_완
- 'error'글씨와 마이크 색 없애기

4.Home to Reset_완

5.음성인식 에러 코드 작성
On Error 7 = 다시 말해 주세요.
On Error 2 = 네트워크 연결을 확인해 주세요.

6.뒤로가기 버튼 위치 변경

[Clean Architecture]
Clean Architecture 구조에 맞게 파일 배치
Activity 이름 변경
NewsApi : coroutine flow로 처리
viewmodel usecase 추가

2/11
[test]
작동 테스트
간단한 오류 수정

[PT준비]
ppt (app description, features, flow chart, code review)

2/12
1차 프로젝트 발표

2/13
2차 프로젝트_Automation Overview

2/14
2차 프로젝트 관련 노트북 세팅
주간보고서 작성


uml digram 데이터 흐름 app, data, domain
data flow 사용 live data intent putextra
child viewmodel
굵직한 개념 코드
데이터 흐름, api받아오는 데이터, 말하는 거 