<Study>
RobotFramework
- 테스트 자동화를 위한 오픈 소스 프레임워크
- 키워드 기반으로 테스트를 작성
- 키워드 기반 테스트: 테스트 케이스를 키워드로 작성합니다. 예를 들어, "로그인"이라는 키워드를 정의하고, 이를 사용해 여러 테스트 케이스를 작성할 수 있습니다.
- 확장성: Python이나 Java로 새로운 키워드를 쉽게 추가할 수 있습니다. 이미 많은 라이브러리가 제공되어 있어 다양한 테스트 시나리오를 지원합니다.
- 읽기 쉬운 문법: 테스트 케이스가 사람이 읽기 쉬운 형태로 작성됩니다. 예를 들어, Excel이나 텍스트 파일로 테스트 케이스를 작성할 수 있습니다.
- 다양한 도구와 통합: Selenium, Appium 등 다양한 테스트 도구와 통합하여 웹, 모바일, API 테스트를 수행할 수 있습니다.

Appium
- 모바일 애플리케이션의 UI 자동화를 위한 오픈 소스 프레임워크
- 주로 iOS와 Android 애플리케이션의 테스트에 사용
- 네이티브, 하이브리드, 웹 애플리케이션을 모두 지원
- 크로스 플랫폼 지원: Appium은 동일한 API를 사용하여 iOS와 Android 애플리케이션을 테스트할 수 있습니다. 즉, 한 번 작성한 테스트 스크립트를 두 플랫폼에서 모두 사용할 수 있습니다.
- 언어 독립성: 다양한 프로그래밍 언어(Java, Python, Ruby, JavaScript 등)로 테스트 스크립트를 작성할 수 있습니다2.
- WebDriver 프로토콜 사용: Appium은 Selenium WebDriver 프로토콜을 사용하여 애플리케이션의 요소를 찾고 상호작용합니다. 이는 웹 애플리케이션 테스트와 유사한 방식으로 모바일 애플리케이션을 테스트할 수 있게 합니다1.
- 물리적 장치 및 에뮬레이터 지원: 실제 기기와 에뮬레이터/시뮬레이터에서 모두 테스트를 수행할 수 있습니다3.

Powershell
- 명령줄 셸이자 스크립팅 언어
- 주로 시스템 관리와 자동화를 위해 사용
- 객체 지향: PowerShell은 명령어의 결과를 텍스트가 아닌 객체로 반환합니다. 이를 통해 복잡한 데이터 조작이 더 쉽고 직관적입니다.
- 명령어 일관성: PowerShell의 명령어는 일관된 형식을 가지고 있어 배우기 쉽습니다. 대부분의 명령어는 Get-, Set-, New-와 같은 접두사를 사용합니다.
- 스크립팅 기능: 복잡한 작업을 자동화하기 위해 스크립트를 작성할 수 있습니다. 이를 통해 반복적인 작업을 효율적으로 처리할 수 있습니다.
- 확장성: 다양한 모듈과 스냅인을 통해 기능을 확장할 수 있습니다. 예를 들어, Azure, AWS, VMware 등의 클라우드 서비스와 통합할 수 있습니다.


batch
- Windows 운영 체제에서 명령어를 자동으로 실행하기 위해 사용하는 간단한 스크립트 언어
- 주로 반복적인 작업을 자동화하는 데 사용
- 간단한 문법: Batch 스크립트는 매우 간단한 문법을 가지고 있어, 비전공자도 쉽게 배울 수 있습니다.
- 명령어 집합: 여러 명령어를 하나의 파일에 작성하여 순차적으로 실행할 수 있습니다.
- 자동화: 반복적인 작업을 자동화하여 시간을 절약할 수 있습니다.
- 호환성: 모든 Windows 버전에서 사용할 수 있습니다.


<download>
vs code
python(전역적으로 하나 깔기, venv)
1. python 3.11.9 설치
venv 사용하여 automation-intern-project 프로파일 생성
2. nvm 설치
3. nvm을 사용하여 최신 node 설치
4. appium 설치
5. appium을 이용하여 uiautomator2 설치
6. venv사용해서 만든 프로파일에 robotframework 설치
7. venv사용해서 만든 프로파일에 robotframework-appiumlibrary 설치
8. vscode에 "ms-python.vscode-pylance" "ms-python.debugpy" "robocorp.robotframework-lsp" "charliermarsh.ruff" "ms-python.python" 확장 설치


<Plan>
~금 노트북 세팅
~수(기계 초기 세팅 batch file 만들기)
목 automation project 설명
2/26 2차 중간점검
~3/13 test script

<Powershell Script>
환경설정 자동화 powershell script 생성
밑의 모든 지침 사항은 powershell script 내부에서 이루어져야 함

1. C drive에 venvs 폴더 생성하고 그 내부에 test-automation-env 가상환경 생성

2. 해당 가상환경 내부에 밑에 명시된 python 패키지들을 설치 
    - robotframework
    - robotframework-appium
    - robotframework-pythonlibcore
    - robotframework-seleniumlibrary
    - opencv-contrib-python
    - openai-whisper
    - gTTS
    - Appium-Python-Client 
    - pygame

3. scoop 사용하여 밑 항목 설치
    7zip
    cmake
    ffmpeg

4. nvm 설치

5. nvm을 통해 v20.17.0 node 설치하고 default 노드로 설정

6. 해당 노드에 appium와 uiautomator2 설치

7. 밑과 같은 영구적으로 지정되는 환경변수 설정
- APPIUM_MAIN_JS_PATH = appium에서 제공하는 main.js 파일의 경로가 지정되어야 함
- AUTOMATION_HOME = 추후에 진행하실 프로젝트 경로가 지정되어야 함 (지금 현재 프로젝트가 없으니 C drive 경로로 지정)

8. vscode 설치

9. vscode에 InternsAutomation 프로파일 생성

10. vscode InternsAutomation 프로파일 내부에 "ms-python.python" "ms-python.vscode-pylance" "ms-python.debugpy" "robocorp.robotframework-lsp" "charliermarsh.ruff" 해당 extension들 설치

# powershell script 수행 한 번으로 위의 절차들이 수행되어야 함
# 이미 설치되어 있다면 설치를 하지 않는 분기문들도 필요함


<project ot>
test
-app
	-keyword
	-module(python)
	-test case(키워드들의 조합)(내 앱에 맞게 구조 나누기)(main_폴더를 넣으면 다 돌아감)
	-variable
	-data(csv파일들)

로깅(로그 작업) _왜 fail이 났는지 알 수 있게.