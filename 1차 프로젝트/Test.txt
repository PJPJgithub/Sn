1. Unit Test (유닛 테스트)
유닛 테스트는 프로그램의 작은 단위(주로 함수나 메서드)를 독립적으로 테스트하는 것입니다. 유닛 테스트는 코드가 예상대로 작동하는지 확인하는 데 사용됩니다.

예시: NewsApiService Unit Test

목적: NewsApiService가 newsapi.org에서 올바르게 데이터를 가져오는지 확인합니다.
테스트 내용: 특정 키워드로 뉴스를 검색했을 때, API가 올바른 뉴스 데이터를 반환하는지 확인합니다.
왜 중요한가요?: 유닛 테스트를 통해 개별 함수나 메서드가 정확하게 작동하는지 확인할 수 있습니다. 이는 코드의 신뢰성을 높이고, 버그를 조기에 발견하는 데 도움이 됩니다.
@Test
fun `test getNews returns expected data`() = runBlocking {
    // Given: 테스트를 위한 가짜 응답 설정
    val mockResponse = MockResponse()
        .setBody("""
            {
                "status": "ok",
                "totalResults": 2,
                "articles": [
                    {
                        "source": {"id": "1", "name": "Source1"},
                        "author": "Author1",
                        "title": "Title1",
                        "description": "Description1",
                        "url": "http://example.com/1",
                        "urlToImage": "http://example.com/image1",
                        "publishedAt": "2025-02-04T00:00:00Z"
                    },
                    {
                        "source": {"id": "2", "name": "Source2"},
                        "author": "Author2",
                        "title": "Title2",
                        "description": "Description2",
                        "url": "http://example.com/2",
                        "urlToImage": "http://example.com/image2",
                        "publishedAt": "2025-02-04T00:00:00Z"
                    }
                ]
            }
        """.trimIndent())
    mockWebServer.enqueue(mockResponse)

    // When: API 호출
    val response = apiService.getNews("keyword", "apiKey")

    // Then: 응답 데이터 검증
    assertEquals("ok", response.status)
    assertEquals(2, response.totalResults)
    assertEquals("Title1", response.articles[0].title)
    assertEquals("Title2", response.articles[1].title)
}
2. Instrumented Test (인스트루먼트 테스트)
인스트루먼트 테스트는 실제 기기나 에뮬레이터에서 실행되며, 앱의 여러 컴포넌트가 함께 작동하는지 확인하는 데 사용됩니다. 주로 사용자 인터페이스(UI)와 데이터베이스와 같은 실제 환경에서의 동작을 테스트합니다.

예시: NewsRepository Instrumented Test

목적: 사용자가 검색한 뉴스 목록을 저장하고 나중에 불러오는 기능이 올바르게 작동하는지 확인합니다.
테스트 내용: 특정 키워드로 검색한 뉴스 목록을 저장한 후, 나중에 해당 키워드로 검색한 뉴스 목록을 올바르게 불러오는지 확인합니다.
왜 중요한가요?: 인스트루먼트 테스트를 통해 앱이 실제 환경에서 예상대로 작동하는지 확인할 수 있습니다. 이는 사용자 경험을 개선하고, 실제 사용 시 발생할 수 있는 문제를 미리 발견하는 데 도움이 됩니다.
@Test
fun `test save and fetch searched news`() = runBlocking {
    // Given: 테스트를 위한 뉴스 데이터 설정
    val keyword = "technology"
    val newsList = listOf(
        Article(Source("1", "Source1"), "Author1", "Title1", "Description1", "http://example.com/1", "http://example.com/image1", "2025-02-04T00:00:00Z"),
        Article(Source("2", "Source2"), "Author2", "Title2", "Description2", "http://example.com/2", "http://example.com/image2", "2025-02-04T00:00:00Z")
    )
    repository.saveSearchedNews(keyword, newsList)

    // When: 저장된 뉴스 데이터 불러오기
    val fetchedNewsList = repository.getSearchedNews(keyword)

    // Then: 불러온 데이터 검증
    assertEquals(newsList, fetchedNewsList)
}

[App 적용]
Unit Test
목적: NewsApiService가 newsapi.org에서 데이터를 잘 받아오는지 확인합니다.

이유: 유닛 테스트는 개별 컴포넌트(여기서는 NewsApiService)가 올바르게 작동하는지 확인하는 데 사용됩니다. 이를 통해 API 호출이 예상대로 작동하는지, 올바른 데이터를 반환하는지 검증할 수 있습니다.

Instrumented Test
목적: SampleSttActivityViewModel에서 fetchNewsHeadline 함수가 잘 동작하는지 확인합니다.

이유: 인스트루먼트 테스트는 실제 기기나 에뮬레이터에서 앱의 여러 컴포넌트가 함께 작동하는지 확인하는 데 사용됩니다. 이를 통해 뷰모델이 실제 환경에서 올바르게 작동하는지, UI와 데이터 간의 상호작용이 예상대로 이루어지는지 검증할 수 있습니다.